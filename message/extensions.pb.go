// Code generated by protoc-gen-go.
// source: extensions.proto
// DO NOT EDIT!

package message

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Account_Type int32

const (
	Account_kSelf    Account_Type = 0
	Account_kSina    Account_Type = 1
	Account_kTencent Account_Type = 2
	Account_kBaidu   Account_Type = 3
	Account_kRenren  Account_Type = 4
	Account_kTaobao  Account_Type = 5
	Account_kMomo    Account_Type = 6
	Account_kDouban  Account_Type = 7
	Account_kWechat  Account_Type = 8
	Account_kEnd     Account_Type = 9
)

var Account_Type_name = map[int32]string{
	0: "kSelf",
	1: "kSina",
	2: "kTencent",
	3: "kBaidu",
	4: "kRenren",
	5: "kTaobao",
	6: "kMomo",
	7: "kDouban",
	8: "kWechat",
	9: "kEnd",
}
var Account_Type_value = map[string]int32{
	"kSelf":    0,
	"kSina":    1,
	"kTencent": 2,
	"kBaidu":   3,
	"kRenren":  4,
	"kTaobao":  5,
	"kMomo":    6,
	"kDouban":  7,
	"kWechat":  8,
	"kEnd":     9,
}

func (x Account_Type) Enum() *Account_Type {
	p := new(Account_Type)
	*p = x
	return p
}
func (x Account_Type) String() string {
	return proto.EnumName(Account_Type_name, int32(x))
}
func (x *Account_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Account_Type_value, data, "Account_Type")
	if err != nil {
		return err
	}
	*x = Account_Type(value)
	return nil
}

type Birthday_Month int32

const (
	Birthday_kNone      Birthday_Month = 0
	Birthday_kJanuary   Birthday_Month = 1
	Birthday_kFebruary  Birthday_Month = 2
	Birthday_kMarch     Birthday_Month = 3
	Birthday_kApril     Birthday_Month = 4
	Birthday_kMay       Birthday_Month = 5
	Birthday_kJune      Birthday_Month = 6
	Birthday_kJuly      Birthday_Month = 7
	Birthday_kAugust    Birthday_Month = 8
	Birthday_kSeptember Birthday_Month = 9
	Birthday_kOctober   Birthday_Month = 10
	Birthday_kNovember  Birthday_Month = 11
	Birthday_kDecember  Birthday_Month = 12
	Birthday_kEnd       Birthday_Month = 13
)

var Birthday_Month_name = map[int32]string{
	0:  "kNone",
	1:  "kJanuary",
	2:  "kFebruary",
	3:  "kMarch",
	4:  "kApril",
	5:  "kMay",
	6:  "kJune",
	7:  "kJuly",
	8:  "kAugust",
	9:  "kSeptember",
	10: "kOctober",
	11: "kNovember",
	12: "kDecember",
	13: "kEnd",
}
var Birthday_Month_value = map[string]int32{
	"kNone":      0,
	"kJanuary":   1,
	"kFebruary":  2,
	"kMarch":     3,
	"kApril":     4,
	"kMay":       5,
	"kJune":      6,
	"kJuly":      7,
	"kAugust":    8,
	"kSeptember": 9,
	"kOctober":   10,
	"kNovember":  11,
	"kDecember":  12,
	"kEnd":       13,
}

func (x Birthday_Month) Enum() *Birthday_Month {
	p := new(Birthday_Month)
	*p = x
	return p
}
func (x Birthday_Month) String() string {
	return proto.EnumName(Birthday_Month_name, int32(x))
}
func (x *Birthday_Month) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Birthday_Month_value, data, "Birthday_Month")
	if err != nil {
		return err
	}
	*x = Birthday_Month(value)
	return nil
}

type Profile_Gender int32

const (
	Profile_kPrivate Profile_Gender = 0
	Profile_kMale    Profile_Gender = 1
	Profile_kFemale  Profile_Gender = 2
	Profile_kBL      Profile_Gender = 3
	Profile_kGL      Profile_Gender = 4
	Profile_kBLG     Profile_Gender = 5
	Profile_kGLB     Profile_Gender = 6
	Profile_kEnd     Profile_Gender = 7
)

var Profile_Gender_name = map[int32]string{
	0: "kPrivate",
	1: "kMale",
	2: "kFemale",
	3: "kBL",
	4: "kGL",
	5: "kBLG",
	6: "kGLB",
	7: "kEnd",
}
var Profile_Gender_value = map[string]int32{
	"kPrivate": 0,
	"kMale":    1,
	"kFemale":  2,
	"kBL":      3,
	"kGL":      4,
	"kBLG":     5,
	"kGLB":     6,
	"kEnd":     7,
}

func (x Profile_Gender) Enum() *Profile_Gender {
	p := new(Profile_Gender)
	*p = x
	return p
}
func (x Profile_Gender) String() string {
	return proto.EnumName(Profile_Gender_name, int32(x))
}
func (x *Profile_Gender) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Profile_Gender_value, data, "Profile_Gender")
	if err != nil {
		return err
	}
	*x = Profile_Gender(value)
	return nil
}

type Account struct {
	Type             *Account_Type `protobuf:"varint,1,req,name=type,enum=message.Account_Type,def=0" json:"type,omitempty"`
	Name             *string       `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Token            *string       `protobuf:"bytes,3,req,name=token" json:"token,omitempty"`
	Email            *string       `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}

const Default_Account_Type Account_Type = Account_kSelf

func (m *Account) GetType() Account_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Account_Type
}

func (m *Account) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Account) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

type Friend struct {
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Friend) Reset()         { *m = Friend{} }
func (m *Friend) String() string { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()    {}

func (m *Friend) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Birthday struct {
	Year             *uint32         `protobuf:"varint,1,req,name=year,def=1970" json:"year,omitempty"`
	Month            *Birthday_Month `protobuf:"varint,2,req,name=month,enum=message.Birthday_Month,def=1" json:"month,omitempty"`
	Day              *uint32         `protobuf:"varint,3,req,name=day,def=1" json:"day,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Birthday) Reset()         { *m = Birthday{} }
func (m *Birthday) String() string { return proto.CompactTextString(m) }
func (*Birthday) ProtoMessage()    {}

const Default_Birthday_Year uint32 = 1970
const Default_Birthday_Month Birthday_Month = Birthday_kJanuary
const Default_Birthday_Day uint32 = 1

func (m *Birthday) GetYear() uint32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return Default_Birthday_Year
}

func (m *Birthday) GetMonth() Birthday_Month {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return Default_Birthday_Month
}

func (m *Birthday) GetDay() uint32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return Default_Birthday_Day
}

type Profile struct {
	Gender           *Profile_Gender `protobuf:"varint,1,opt,name=gender,enum=message.Profile_Gender,def=0" json:"gender,omitempty"`
	Birthday         *Birthday       `protobuf:"bytes,2,opt,name=birthday" json:"birthday,omitempty"`
	Emails           []string        `protobuf:"bytes,3,rep,name=emails" json:"emails,omitempty"`
	Friends          []*Friend       `protobuf:"bytes,4,rep,name=friends" json:"friends,omitempty"`
	Accounts         []*Account      `protobuf:"bytes,5,rep,name=accounts" json:"accounts,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}

const Default_Profile_Gender Profile_Gender = Profile_kPrivate

func (m *Profile) GetGender() Profile_Gender {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return Default_Profile_Gender
}

func (m *Profile) GetBirthday() *Birthday {
	if m != nil {
		return m.Birthday
	}
	return nil
}

func (m *Profile) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *Profile) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *Profile) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type User struct {
	Account          []*Account `protobuf:"bytes,1,rep,name=account" json:"account,omitempty"`
	Profile          *Profile   `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}

func (m *User) GetAccount() []*Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *User) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type Captcha struct {
	Image            []byte `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Captcha) Reset()         { *m = Captcha{} }
func (m *Captcha) String() string { return proto.CompactTextString(m) }
func (*Captcha) ProtoMessage()    {}

func (m *Captcha) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type Veryfy struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Veryfy) Reset()         { *m = Veryfy{} }
func (m *Veryfy) String() string { return proto.CompactTextString(m) }
func (*Veryfy) ProtoMessage()    {}

var E_Veryfy_Account = &proto.ExtensionDesc{
	ExtendedType:  (*Request)(nil),
	ExtensionType: (*Account)(nil),
	Field:         8,
	Name:          "message.Veryfy.account",
	Tag:           "bytes,8,opt,name=account",
}

var E_Veryfy_User = &proto.ExtensionDesc{
	ExtendedType:  (*Response)(nil),
	ExtensionType: (*User)(nil),
	Field:         8,
	Name:          "message.Veryfy.user",
	Tag:           "bytes,8,opt,name=user",
}

type Register struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Register) Reset()         { *m = Register{} }
func (m *Register) String() string { return proto.CompactTextString(m) }
func (*Register) ProtoMessage()    {}

var E_Register_User = &proto.ExtensionDesc{
	ExtendedType:  (*Request)(nil),
	ExtensionType: (*User)(nil),
	Field:         9,
	Name:          "message.Register.user",
	Tag:           "bytes,9,opt,name=user",
}

var E_Register_Captcha = &proto.ExtensionDesc{
	ExtendedType:  (*Response)(nil),
	ExtensionType: (*Captcha)(nil),
	Field:         9,
	Name:          "message.Register.captcha",
	Tag:           "bytes,9,opt,name=captcha",
}

type Login struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Login) Reset()         { *m = Login{} }
func (m *Login) String() string { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()    {}

var E_Login_Account = &proto.ExtensionDesc{
	ExtendedType:  (*Request)(nil),
	ExtensionType: (*Account)(nil),
	Field:         10,
	Name:          "message.Login.account",
	Tag:           "bytes,10,opt,name=account",
}

var E_Login_User = &proto.ExtensionDesc{
	ExtendedType:  (*Response)(nil),
	ExtensionType: (*User)(nil),
	Field:         10,
	Name:          "message.Login.user",
	Tag:           "bytes,10,opt,name=user",
}

type Update struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}

var E_Update_New = &proto.ExtensionDesc{
	ExtendedType:  (*Request)(nil),
	ExtensionType: (*User)(nil),
	Field:         11,
	Name:          "message.Update.new",
	Tag:           "bytes,11,opt,name=new",
}

var E_Update_User = &proto.ExtensionDesc{
	ExtendedType:  (*Response)(nil),
	ExtensionType: (*User)(nil),
	Field:         11,
	Name:          "message.Update.user",
	Tag:           "bytes,11,opt,name=user",
}

func init() {
	proto.RegisterEnum("message.Account_Type", Account_Type_name, Account_Type_value)
	proto.RegisterEnum("message.Birthday_Month", Birthday_Month_name, Birthday_Month_value)
	proto.RegisterEnum("message.Profile_Gender", Profile_Gender_name, Profile_Gender_value)
	proto.RegisterExtension(E_Veryfy_Account)
	proto.RegisterExtension(E_Veryfy_User)
	proto.RegisterExtension(E_Register_User)
	proto.RegisterExtension(E_Register_Captcha)
	proto.RegisterExtension(E_Login_Account)
	proto.RegisterExtension(E_Login_User)
	proto.RegisterExtension(E_Update_New)
	proto.RegisterExtension(E_Update_User)
}
